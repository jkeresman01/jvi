=== Logging

rootLogger - handlers
    1 - platfor/core.startup/DispatchingHandler
        delegate: org.netbeans.core.startup.logging.MessagesHandler@21409709
    2 - platfor/core.startup/DispatchingHandler
        delagate: java.util.logging.StreamHandler@709da0bf
    3 - platfor/core.startup/TopLogging$LookupDel <<<<<<<<<<<<<
    4 - org.netbeans.modules.uihandler.UIHandler@39bbb804

- platform/openide.util/Exceptions annotates
    then finally LOG.log(level, null, t)
- platform/core.startup/TopLogging$LookupDel handler which passes off
    to all registered (via serviceprovider) handlers. In particular
- platform/o.n.core/NbErrorManager isa handler. It diddles level
    and creates an exception record for
- platform/o.n.core/NotifyExcPanel.notify. If shallNotify it does
    invokeLater which builds the dialog acc'd to exception record.
- and don't forget 1973


    Experimentally SEVERE/WARNING get dialog

Exceptions.printStackTrace
Exceptions.attachSeverity

platform/o.n.core
    @org.openide.util.lookup.ServiceProvider(service=java.util.logging.Handler.class)
    public final class NbErrorManager extends Handler {

org.netbeans.core.NotifyExcPanel.notify
    shallNotify - algorithm in here
    Unlikely that anything under WARNING gets dialog
        int minAlert = Integer.getInteger(
            "netbeans.exception.alert.min.level", 900); // NOI18N
        int minReport = Integer.getInteger(
            "netbeans.exception.report.min.level", defReport); // NOI18N

    "AWT-EventQueue-0"
	at org.netbeans.core.NotifyExcPanel.notify(NotifyExcPanel.java:266)
	at org.netbeans.core.NbErrorManager.publish(NbErrorManager.java:71)
	at org.netbeans.core.startup.TopLogging$LookupDel.publish(TopLogging.java:428)
	at java.util.logging.Logger.log(Logger.java:979)
	at java.util.logging.Logger.doLog(Logger.java:1006)
	at java.util.logging.Logger.log(Logger.java:1117)
	at org.openide.util.Exceptions.printStackTrace(Exceptions.java:192)
