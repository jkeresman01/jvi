Working with jVi options

  - General
    . options are persisted to the Preferences data base
    . Option.java is the base class for all options.
    . Currently the types of options are:
        BooleanOption, // checkbox
        IntegerOption,
        StringOption,
        ColorOption,
        EnumStringOption,EnumIntegerOption, // combo box select 1 of N
        EnumSetOption, // list of checkboxes, select any of N
    . listen to changes to options by doing
        OptUtil.getEventBus().register
          // G.p_xxx changed, dialog and/or :set command
            @Subscribe public void f(OptUtil.OptionChangeGlobalEvent ev) {...}
          // Option<> changed; done by dialog
            @Subscribe public void f(OptUtil.OptionChangeOptionEvent ev) {...}

  - Adding an option
    Typically touch these three files
        Options.java
        OptionsBeanBase.java
        VimOption.java (if used with :set command)
    . If needed, in G.java define pointer to the option, e.g. G.p_opt_name
      Otherwise option can be found with Options.getOption(optName)
      and G.opt_name is defined and possibly not used. This is needed
      if there's an entry in VimOption to use with :set command.

    . In Options.java
      - define the name of the option

        public static final String report = "viReport";

      Note that the options are grouped by category

      - create the option and default value; assign to global if needed

        G.p_report = createIntegerOption(report, 2); // RARELY DONE

        There is an optional third argument to createXxxOptions, this argument
        is a validator. If not provided, then any value suitable for the type
        is accepted.

      - Assign option to category, provide short and long description.
        The shortdesc and longdesc are taken from vim when applicable.
        The shortdesc is the name(s) of the vim option.

        setupOptionDesc(categoryList, optName, shortdesc, longdesc);

      - Optionally to mark the option as expert, or hide it from the UI

        setExpertHidden(optName, expertFlag, hiddenFlag);

    . In OptionsBeanBase.java define the getter/setter for the option
      Typically add new get/set right after getJViVersion()

      For example:
      There is in Options.java
            public static final String showMode = "viShowMode";
      In OptionsBeanBase.java
            public void setViShowMode(boolean arg)
                { put(Options.showMode, arg); }
            public boolean getViShowMode()
                { return getboolean(Options.showMode); }
      Required that the method name be the same as the option name,
      with the option name capitalized, like putOptionName(...)

      Note that option changes are broadcast over OptUtil.getEventBus().

      To catch when the preference/Option<> changes. This is when
      the change is done through dialog and persisted to Option<>/disk.
          @Subscribe OptionChangeOptionEvent

      To catch when :set command changes G.p_xx, for both SET command
      of global and through dialog use
          @Subscribe OptionChangeGlobalEvent

      Local options have an independent mechanism.
      See SetColonCommand

    . VimOption.java
      Add an entry in VimOption.java so option works with :set command.
      An entry in the VimOption[] table defines
      the scope of the option and the options name used to set the value
      through reflection. See SetColonCommand.java if you're curious.

    . Option Scope
      There are three types of options with a common naming scheme
          global   p_xxx 
          window w_p_xxx
          buffer b_p_xxx
      In jvi.core Buffer.java and TextView.java each have a method named
      "firstGo()". It is called once to set initial values. Further value
      changes, either through the set command or the options dialog, are
      propogated to the java variables using reflection.


  - Adding a new category of options.
    A category of options is represented by a list of option names.

    . In Options.java define the category by adding it to "enum Category".
      setupOptionDesc(category, optName, shortdesc, longdesc) adds the opiton
      to the category list. Use OptUtil.getOptionList(category) to get list.

    . In OptionsBean.java define a tiny class for the category. This class is
      a subclass of OptionsBeanBase.

      static public class Search extends OptionsBeanBase {
          public Search() {
              super(Search.class, "Search Options", Options.Category.SEARCH);
          } }

      The arguments to the superclass are the class itself, the name of the
      category for UI display and the enum Category from previous step.

    . In OptionsPanel.getTabbedOptions add an instance of the class created
      in the previous step.

          addTab(tabs, "Search", new OptionsBean.Search());

      This is the order that the tabs appear in the dialog.

    . For NetBeans add the new category to NbOptionsNode.java

      - In this file, use an existing node as an example; like NODE_SEARCH.

        Define NODE_XXX, use it in two other places.

      - Add a class for the category. Copy the example class SearchNode,
        change class name to XxxNode, invoke super() with the class defined in
        OptionsBean.java
        
        super(new OptionsBean.Xxx() { ....

        We need to override the put methods because NetBeans doesn't handle
        a bean's PropertyVetoException (I think that's a NetBeans bug).

    vim: set sw=2:
